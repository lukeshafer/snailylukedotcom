---
import type { CollectionEntry } from 'astro:content';
import css from '../../lib/css';

type Props = CollectionEntry<'snippets'> & {
	href: string;
};

const {
	render,
	data: { title, key },
	href,
} = Astro.props;

const { Content } = await render();
---

<snippet-item class="w-full" {title} {key}>
	<a {href} class={`block w-full p-2 px-4 text-left hover:bg-sky-900/50`}>{title}</a>
	<template data-name="code-template">
		<Content />
	</template>
</snippet-item>

<style
	set:html={css`
		:where(snippet-list[data-active=${key}] a[href=${href}]) {
			background-color: rgb(12 74 110 / 0.2);
			view-transition-name: active;
		}
	`}
></style>

<script>
	customElements.define(
		'snippet-item',
		class SnippetItem extends HTMLElement {
			connectedCallback() {
				const anchor = this.querySelector('a');
				const codeTemplate = this.querySelector('template[data-name="code-template"]');

				if (!(codeTemplate instanceof HTMLTemplateElement)) return;

				anchor?.addEventListener('click', (e) => {
					e.preventDefault();
					const href = anchor.getAttribute('href') || '';
					this.dispatchEvent(
						new CustomEvent('snippetclick', {
							detail: {
								label: this.getAttribute('title'),
								key: this.getAttribute('key') || '',
								href,
								node: codeTemplate.content.cloneNode(true),
							},
							bubbles: true,
						})
					);
				});
			}
		}
	);
</script>
