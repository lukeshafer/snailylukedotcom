---
import { Code } from 'astro:components';
import type { BuiltinLanguage } from 'shikiji';

interface Props {
	name: string;
	lang: BuiltinLanguage;
	content: string;
	fromUrl?: boolean;
}

const { name, lang, content, fromUrl = false } = Astro.props;
---

<snippet-item {name} {lang} {content} from-url={fromUrl}>
	<button class="w-full p-2 px-4 text-left group-[selected]:p-2 hover:bg-sky-900/50"
		>{name}</button
	>
	<template data-name="code-template">
		<div class="w-fit">
			<Code {lang} code={content} theme="rose-pine" />
		</div>
	</template>
</snippet-item>

<style is:global>
	snippet-item[selected] button {
		background-color: theme(colors.sky.950/50);
	}
</style>

<script>
	export class SnippetItem extends HTMLElement {
		codeTemplate: HTMLTemplateElement | null = null;
		button: HTMLButtonElement | null = null;

		constructor() {
			super();
			this.button = this.querySelector('button')!;
			this.codeTemplate = this.querySelector<HTMLTemplateElement>(
				'template[data-name="code-template"]'
			);
		}

		setAsActive() {
			this.dispatchEvent(
				new CustomEvent('snippetclick', {
					detail: {
            name: this.getAttribute('name'),
						node: this.codeTemplate!.content.cloneNode(true),
					},
					bubbles: true,
				})
			);
		}

		connectedCallback() {
			this.codeTemplate = this.querySelector<HTMLTemplateElement>(
				'template[data-name="code-template"]'
			)!;
			this.button = this.querySelector('button')!;

			if (this.hasAttribute('from-url')) this.setAsActive();

			this.querySelector('button')?.addEventListener('click', () => {
				this.setAsActive();
			});
		}
	}

	customElements.define('snippet-item', SnippetItem);
</script>
