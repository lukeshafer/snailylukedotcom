---
import SnippetItem from './SnippetItem.astro';
import CopyButton from '../common/CopyButton.astro';
import type { CollectionEntry } from 'astro:content';

interface Props {
	active_entry?: CollectionEntry<'snippets'>;
	snippets: CollectionEntry<'snippets'>[];
}

const { snippets, active_entry } = Astro.props;

const activeEntryContent = active_entry?.body;
---

<snippet-list
	data-active={active_entry?.data.key}
	class="group/snippet-list grid h-[30rem] max-h-screen grid-cols-4 overflow-hidden rounded-xl">
	<nav
		class="grid h-full content-start gap-2 overflow-y-scroll border-r border-r-gray-800/80 bg-gray-900 py-2 scrollbar-thin scrollbar-track-gray-900 scrollbar-thumb-gray-800">
		{snippets.map((snippet) => <SnippetItem {...snippet} href={`/snippets/${snippet.slug}`} />)}
	</nav>
	<article
		class="scrollbar-thumb-rounded group/code-preview relative col-[2_/_-1] overflow-scroll bg-gray-900 p-4 scrollbar-thin scrollbar-thumb-gray-800">
		<CopyButton initial_content={activeEntryContent} />
		<div data-preview-content class="w-max"><slot /></div>
	</article>
</snippet-list>

<script>
	customElements.define(
		'snippet-list',
		class SnippetList extends HTMLElement {
			connectedCallback() {
				this.addEventListener('snippetclick', (e) => {
					const snippetPreview = this.querySelector('[data-preview-content]');
					if (!snippetPreview) throw new Error('Snippet Preview Container not found.');

					this.setAttribute('data-active', e.detail.key);
					snippetPreview.replaceChildren(e.detail.node);

					const copy_button = this.querySelector('copy-button');
					copy_button?.setAttribute('content', snippetPreview.textContent ?? '');

					const url = new URL(window.location.href);
					url.pathname = e.detail.href;
					window.history.replaceState({}, '', url.toString());
				});
			}
		}
	);
</script>
